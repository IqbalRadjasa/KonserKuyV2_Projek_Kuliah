package pojo;
// Generated Oct 1, 2024 2:35:51 AM by Hibernate Tools 4.3.1


import DAO.DAOConcert;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import javax.faces.bean.ManagedBean;

/**
 * PaymentHistory generated by hbm2java
 */
@ManagedBean
public class PaymentHistory  implements java.io.Serializable {


     private Integer id;
     private int userId;
     private String concertName;
     private Date bookingDate;

    public PaymentHistory() {
    }

    public PaymentHistory(int userId, String concertName, Date bookingDate) {
       this.userId = userId;
       this.concertName = concertName;
       this.bookingDate = bookingDate;
    }
   
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }
    public int getUserId() {
        return this.userId;
    }
    
    public void setUserId(int userId) {
        this.userId = userId;
    }
    public String getConcertName() {
        return this.concertName;
    }
    
    public void setConcertName(String concertName) {
        this.concertName = concertName;
    }
    public Date getBookingDate() {
        return this.bookingDate;
    }
    
    public void setBookingDate(Date bookingDate) {
        this.bookingDate = bookingDate;
    }

    public PaymentHistory insert(){
        DAOConcert uDao = new DAOConcert();

        LocalDateTime now = LocalDateTime.now();

        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
        String formattedNow = now.format(formatter);

        this.bookingDate = Date.from(now.atZone(ZoneId.systemDefault()).toInstant());

        uDao.insertHistory(this);
//        userId = 0;
//        concertName = "";
//        bookingDate = null;
        
        return this;
    }

    public List<PaymentHistory> getByUserId() {
        DAOConcert uDao = new DAOConcert();
        List<PaymentHistory> us = uDao.getHistoryByUserId(userId); 

        if (us != null && !us.isEmpty()) {
            return us;  
        }

        return null;  
    }

    
    public boolean deleteById(int id) {
        DAOConcert uDao = new DAOConcert();
        return uDao.deleteById(id);
    }
}


